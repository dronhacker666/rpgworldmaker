var Tiles = {	collection: [],	fileList: [],		selectedTiles: [],		add: function(filename, type){		switch(type){			case 0: // Autotile				$("<div></div>")				.css({					width: "99%",					height: 32,					border: "1px dashed #000",				})				.append( new Tile(filename).icon )				.appendTo("#left_panel");			break;			case 1: // TileSet						var content = $("<div> Loading... </div>")				.css({					width: "99%",					border: "1px dashed #000",				})				.appendTo("#left_panel");						var img = new Image();				img.onload = function(){									var w = img.width/32;					var h = img.height/32;										content.css({						width: img.width,						height: img.height,					})					content.html("");										var group_start_id = Tiles.collection.length;										for(var y=0; y<h; y++){						for(var x=0; x<w; x++){							content.append( new Tile(filename,{								tex_offsetX:x*32,								tex_offsetY:y*32,								data: {									group_width: w,									group_start_id: group_start_id,								}							}).icon );													}					}								}				img.src = filename;						break;		}	}	}var Tile = function(filename, options){	var options = $.extend({		tex_offsetX: 0,		tex_offsetY: 0,		data: null,	},options);	this.tex_offsetX = options.tex_offsetX;	this.tex_offsetY = options.tex_offsetY;	this.data = options.data;		var instance = this;	this.id = Tiles.collection.length;	Tiles.collection[this.id] = this;	this.texture = new Image();	this.texture.src = filename;		this.icon = $("<div>"+this.id+"</div>")	.css({		cssFloat: "left",		width: 32,		height: 32,		background: "url("+filename+") -"+options.tex_offsetX+" -"+options.tex_offsetY,	})	.bind({		mouseover: function(){			$(this).css({				width: 30,				height: 30,				border: "1px solid #fff",			})		},		mouseout: function(){			$(this).css({				width: 32,				height: 32,				border: "",			})		},		mousedown: function(event){			if(event.button==0){			}			if(event.button==2){							try{Tiles.selectedTiles[0].unselect();}catch(e){};				Tiles.selectedTiles.length = 0;				Tiles.selectedTiles.push(instance);				instance.select();							}		},		mouseup: function(){			if(instance.data){							var w = instance.data.group_width;				var sgroupid = instance.data.group_start_id;				var sid = Tiles.selectedTiles[0].id;				var eid = instance.id;								var srow = parseInt((sid-sgroupid)/w);				var scol = sid-sgroupid-srow*w;								var erow = parseInt((eid-sgroupid)/w);				var ecol = eid-sgroupid-erow*w;								console.log(srow+" "+scol+" --- "+erow+" "+ecol);								for(var x=srow; x<=erow; x++){					for(var y=scol; y<=ecol; y++){																	Tiles.collection[ x*w+y+sgroupid ].select();																	}				}						}		}	})	}Tile.prototype = {	select: function(){		this.icon.html('<div style="background:rgba(0,0,0,0.5);width:100%;height:100%"></div>');	},	unselect: function(){		this.icon.html('');	},}